// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia.Data;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ApiVeterinariaContext))]
    [Migration("20231017035946_InitialCreatreggfgfhefef")]
    partial class InitialCreatreggfgfhefef
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("HoraCita")
                        .HasColumnType("time(6)");

                    b.Property<int>("IdMascotaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTratamientoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdVeterinarioFk")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdMascotaFk");

                    b.HasIndex("IdTratamientoFk");

                    b.HasIndex("IdVeterinarioFk");

                    b.ToTable("cita", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCita = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HoraCita = new TimeSpan(827866543332),
                            IdMascotaFk = 1,
                            IdTratamientoFk = 3,
                            IdVeterinarioFk = 4,
                            Motivo = "Vacunacion"
                        },
                        new
                        {
                            Id = 2,
                            FechaCita = new DateTime(2023, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HoraCita = new TimeSpan(827866543346),
                            IdMascotaFk = 4,
                            IdTratamientoFk = 1,
                            IdVeterinarioFk = 5,
                            Motivo = "Vacunacion"
                        },
                        new
                        {
                            Id = 3,
                            FechaCita = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HoraCita = new TimeSpan(827866543347),
                            IdMascotaFk = 3,
                            IdTratamientoFk = 2,
                            IdVeterinarioFk = 1,
                            Motivo = "Revision general"
                        },
                        new
                        {
                            Id = 4,
                            FechaCita = new DateTime(2023, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HoraCita = new TimeSpan(827866543349),
                            IdMascotaFk = 2,
                            IdTratamientoFk = 3,
                            IdVeterinarioFk = 4,
                            Motivo = "Vacunacion"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.ClienteProducto", b =>
                {
                    b.Property<int>("IdClienteFk")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("IdClienteFk", "IdProductoFk");

                    b.HasIndex("IdProductoFk");

                    b.ToTable("clienteProducto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Especie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("especie", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Felino"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Anfibio"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Reptil"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Laboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("laboratorio", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "cll 32 a",
                            Nombre = "Genfar",
                            Telefono = "5454"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "# trs 787",
                            Nombre = "MK",
                            Telefono = "767676"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdEspecieFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPropietarioFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRazaFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdEspecieFk");

                    b.HasIndex("IdPropietarioFk");

                    b.HasIndex("IdRazaFk");

                    b.ToTable("mascota", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaNacimiento = new DateTime(2023, 10, 16, 22, 59, 46, 656, DateTimeKind.Local).AddTicks(4930),
                            IdEspecieFk = 1,
                            IdPropietarioFk = 1,
                            IdRazaFk = 1,
                            Nombre = "michi"
                        },
                        new
                        {
                            Id = 2,
                            FechaNacimiento = new DateTime(2023, 10, 16, 22, 59, 46, 656, DateTimeKind.Local).AddTicks(4936),
                            IdEspecieFk = 1,
                            IdPropietarioFk = 1,
                            IdRazaFk = 1,
                            Nombre = "gato"
                        },
                        new
                        {
                            Id = 3,
                            FechaNacimiento = new DateTime(2023, 10, 16, 22, 59, 46, 656, DateTimeKind.Local).AddTicks(4937),
                            IdEspecieFk = 2,
                            IdPropietarioFk = 3,
                            IdRazaFk = 1,
                            Nombre = "firulais"
                        },
                        new
                        {
                            Id = 4,
                            FechaNacimiento = new DateTime(2023, 10, 16, 22, 59, 46, 656, DateTimeKind.Local).AddTicks(4938),
                            IdEspecieFk = 1,
                            IdPropietarioFk = 1,
                            IdRazaFk = 1,
                            Nombre = "gato con botas"
                        },
                        new
                        {
                            Id = 5,
                            FechaNacimiento = new DateTime(2023, 10, 16, 22, 59, 46, 656, DateTimeKind.Local).AddTicks(4939),
                            IdEspecieFk = 2,
                            IdPropietarioFk = 2,
                            IdRazaFk = 2,
                            Nombre = "tamara"
                        },
                        new
                        {
                            Id = 6,
                            FechaNacimiento = new DateTime(2023, 10, 16, 22, 59, 46, 656, DateTimeKind.Local).AddTicks(4941),
                            IdEspecieFk = 3,
                            IdPropietarioFk = 3,
                            IdRazaFk = 3,
                            Nombre = "terry"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdLaboratorioFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLaboratorioFk");

                    b.ToTable("medicamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdLaboratorioFk = 1,
                            Nombre = "Clonazepan",
                            Precio = 33.399999999999999,
                            Stock = 34
                        },
                        new
                        {
                            Id = 2,
                            IdLaboratorioFk = 1,
                            Nombre = "Dolex",
                            Precio = 12.119999999999999,
                            Stock = 2
                        },
                        new
                        {
                            Id = 3,
                            IdLaboratorioFk = 1,
                            Nombre = "Acetaminofen",
                            Precio = 1.54,
                            Stock = 55
                        },
                        new
                        {
                            Id = 4,
                            IdLaboratorioFk = 2,
                            Nombre = "Jarabe para la tos",
                            Precio = 9.8900000000000006,
                            Stock = 1
                        },
                        new
                        {
                            Id = 5,
                            IdLaboratorioFk = 2,
                            Nombre = "Dolex Liquido",
                            Precio = 543.5,
                            Stock = 98
                        },
                        new
                        {
                            Id = 6,
                            IdLaboratorioFk = 2,
                            Nombre = "Diclofenaco",
                            Precio = 6000.0,
                            Stock = 14
                        },
                        new
                        {
                            Id = 7,
                            IdLaboratorioFk = 2,
                            Nombre = "Naproxeno",
                            Precio = 7000.0,
                            Stock = 31
                        },
                        new
                        {
                            Id = 8,
                            IdLaboratorioFk = 2,
                            Nombre = "Loratadina ",
                            Precio = 5001.0,
                            Stock = 21
                        });
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoMedicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CostoTotal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdMedicamentoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoMovimientoFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMedicamentoFk");

                    b.HasIndex("IdTipoMovimientoFk");

                    b.ToTable("movimientoMedicamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CostoTotal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoMovimientoFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProductoFk");

                    b.HasIndex("IdTipoMovimientoFk");

                    b.ToTable("movimientoProducto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdProveedorFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProveedorFk");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Propietario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("propietario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "pri@gmail.com",
                            Nombre = "pri",
                            Telefono = "3213"
                        },
                        new
                        {
                            Id = 2,
                            Email = "raul@gmail.com",
                            Nombre = "raul",
                            Telefono = "54545"
                        },
                        new
                        {
                            Id = 3,
                            Email = "stiven@gmail.com",
                            Nombre = "stiven",
                            Telefono = "87878"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("proveedor", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Raza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEspecieFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdEspecieFk");

                    b.ToTable("raza", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdEspecieFk = 1,
                            Nombre = "gato"
                        },
                        new
                        {
                            Id = 2,
                            IdEspecieFk = 1,
                            Nombre = "tigre"
                        },
                        new
                        {
                            Id = 3,
                            IdEspecieFk = 1,
                            Nombre = "puma"
                        },
                        new
                        {
                            Id = 4,
                            IdEspecieFk = 2,
                            Nombre = "rana"
                        },
                        new
                        {
                            Id = 5,
                            IdEspecieFk = 3,
                            Nombre = "salamandra"
                        },
                        new
                        {
                            Id = 6,
                            IdEspecieFk = 3,
                            Nombre = "cocodrilo"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdUserFk");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Empleado"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.TipoMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tipoMovimiento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TratamientoMedicamento", b =>
                {
                    b.Property<int>("IdTratamientoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicamentoFk")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("IdTratamientoFk", "IdMedicamentoFk");

                    b.HasIndex("IdMedicamentoFk");

                    b.ToTable("tratamientoMedicamento", (string)null);

                    b.HasData(
                        new
                        {
                            IdTratamientoFk = 1,
                            IdMedicamentoFk = 5,
                            Id = 1
                        },
                        new
                        {
                            IdTratamientoFk = 2,
                            IdMedicamentoFk = 2,
                            Id = 2
                        },
                        new
                        {
                            IdTratamientoFk = 3,
                            IdMedicamentoFk = 4,
                            Id = 3
                        });
                });

            modelBuilder.Entity("Dominio.Entities.TratamientoMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaAdministracion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tratamientoMedico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dosis = "33.3 mlg",
                            FechaAdministracion = new DateTime(2023, 10, 16, 22, 59, 46, 660, DateTimeKind.Local).AddTicks(3201),
                            Observacion = "presenta contuciones"
                        },
                        new
                        {
                            Id = 2,
                            Dosis = "2 tabletas",
                            FechaAdministracion = new DateTime(2023, 10, 16, 22, 59, 46, 660, DateTimeKind.Local).AddTicks(3208),
                            Observacion = "una cada 12 horas"
                        },
                        new
                        {
                            Id = 3,
                            Dosis = "123.9 mlg",
                            FechaAdministracion = new DateTime(2023, 10, 16, 22, 59, 46, 660, DateTimeKind.Local).AddTicks(3209),
                            Observacion = "solo una inyeccion al dia"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contraseña = "1234",
                            Email = "kevin@gmail.com",
                            Nombre = "Kevin"
                        },
                        new
                        {
                            Id = 2,
                            Contraseña = "1234",
                            Email = "user@gmail.com",
                            Nombre = "user"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.UserRol", b =>
                {
                    b.Property<int>("IdUsuarioFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("IdUsuarioFk", "IdRolFk");

                    b.HasIndex("IdRolFk");

                    b.ToTable("usersRols", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Veterinario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("veterinario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "maria@gmail.com",
                            Especialidad = "cirujano vascular",
                            Nombre = "maria",
                            Telefono = "1234"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jose@gmail.com",
                            Especialidad = "castrador",
                            Nombre = "jose",
                            Telefono = "1234567"
                        },
                        new
                        {
                            Id = 3,
                            Email = "saul@gmail.com",
                            Especialidad = "cirujano vascular",
                            Nombre = "saul",
                            Telefono = "1234444"
                        },
                        new
                        {
                            Id = 4,
                            Email = "paco@gmail.com",
                            Especialidad = "vacunador",
                            Nombre = "paco",
                            Telefono = "5454"
                        },
                        new
                        {
                            Id = 5,
                            Email = "valentina@gmail.com",
                            Especialidad = "revisiones generales",
                            Nombre = "valentina",
                            Telefono = "7644"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Cita", b =>
                {
                    b.HasOne("Dominio.Entities.Mascota", "Mascota")
                        .WithMany("Citas")
                        .HasForeignKey("IdMascotaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TratamientoMedico", "TratamientoMedico")
                        .WithMany("Citas")
                        .HasForeignKey("IdTratamientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Veterinario", "Veterinario")
                        .WithMany("Citas")
                        .HasForeignKey("IdVeterinarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");

                    b.Navigation("TratamientoMedico");

                    b.Navigation("Veterinario");
                });

            modelBuilder.Entity("Dominio.Entities.ClienteProducto", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("ClientesProductos")
                        .HasForeignKey("IdClienteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Producto", "Producto")
                        .WithMany("ClientesProductos")
                        .HasForeignKey("IdProductoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Entities.Mascota", b =>
                {
                    b.HasOne("Dominio.Entities.Especie", "Especie")
                        .WithMany("Mascotas")
                        .HasForeignKey("IdEspecieFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Propietario", "Propietario")
                        .WithMany("Mascotas")
                        .HasForeignKey("IdPropietarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Raza", "Raza")
                        .WithMany("Mascotas")
                        .HasForeignKey("IdRazaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");

                    b.Navigation("Propietario");

                    b.Navigation("Raza");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.HasOne("Dominio.Entities.Laboratorio", "Laboratorio")
                        .WithMany("Medicamentos")
                        .HasForeignKey("IdLaboratorioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratorio");
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoMedicamento", b =>
                {
                    b.HasOne("Dominio.Entities.Medicamento", "Medicamento")
                        .WithMany("MovimientosMedicamentos")
                        .HasForeignKey("IdMedicamentoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoMovimiento", "TipoMovimiento")
                        .WithMany("MovimientosMedicamentos")
                        .HasForeignKey("IdTipoMovimientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("TipoMovimiento");
                });

            modelBuilder.Entity("Dominio.Entities.MovimientoProducto", b =>
                {
                    b.HasOne("Dominio.Entities.Producto", "Producto")
                        .WithMany("MovimientosProductos")
                        .HasForeignKey("IdProductoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoMovimiento", "TipoMovimiento")
                        .WithMany("MovimientosProductos")
                        .HasForeignKey("IdTipoMovimientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("TipoMovimiento");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.HasOne("Dominio.Entities.Proveedor", "Proveedor")
                        .WithMany("Productos")
                        .HasForeignKey("IdProveedorFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entities.Raza", b =>
                {
                    b.HasOne("Dominio.Entities.Especie", "Especie")
                        .WithMany("Razas")
                        .HasForeignKey("IdEspecieFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especie");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Entities.TratamientoMedicamento", b =>
                {
                    b.HasOne("Dominio.Entities.Medicamento", "Medicamento")
                        .WithMany("TratamientosMedicamentos")
                        .HasForeignKey("IdMedicamentoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TratamientoMedico", "TratamientoMedico")
                        .WithMany("TratamientosMedicamentos")
                        .HasForeignKey("IdTratamientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("TratamientoMedico");
                });

            modelBuilder.Entity("Dominio.Entities.UserRol", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", "Rol")
                        .WithMany("RolesUsuarios")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.User", "Usuario")
                        .WithMany("RolesUsuarios")
                        .HasForeignKey("IdUsuarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Navigation("ClientesProductos");
                });

            modelBuilder.Entity("Dominio.Entities.Especie", b =>
                {
                    b.Navigation("Mascotas");

                    b.Navigation("Razas");
                });

            modelBuilder.Entity("Dominio.Entities.Laboratorio", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Mascota", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Navigation("MovimientosMedicamentos");

                    b.Navigation("TratamientosMedicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Navigation("ClientesProductos");

                    b.Navigation("MovimientosProductos");
                });

            modelBuilder.Entity("Dominio.Entities.Propietario", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.Raza", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Navigation("RolesUsuarios");
                });

            modelBuilder.Entity("Dominio.Entities.TipoMovimiento", b =>
                {
                    b.Navigation("MovimientosMedicamentos");

                    b.Navigation("MovimientosProductos");
                });

            modelBuilder.Entity("Dominio.Entities.TratamientoMedico", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("TratamientosMedicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("RolesUsuarios");
                });

            modelBuilder.Entity("Dominio.Entities.Veterinario", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
